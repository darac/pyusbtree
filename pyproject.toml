
[tool.poetry]
  authors     = ["Darac Marjal <darac+github@darac.org.uk>"]
  description = "A Console application showing your USB devices in a tree format."
  name        = "pyusbtree"
  version     = "0.1.0"

  classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",

    "License :: OSI Approved :: MIT License",

    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
  ]
  documentation = "https://pyusbtree.readthedocs.io"
  homepage = "https://github.com/darac/pyusbtree"
  keywords = ["pyusbtree"]
  readme = "README.md"
  repository = "https://github.com/darac/pyusbtree"


  [tool.poetry.urls]
    "Bug Tracker" = "https://github.com/darac/pyusbtree/issues"


  [tool.poetry.scripts]
    pyusbtree = 'pyusbtree.cli:main'


  [tool.poetry.dependencies]
    click  = "^8.1.3"
    python = "<3.12,>=3.8"


  [tool.poetry.dev-dependencies]
    black                 = "^23.1.0"
    bump2version          = "^1.0.1"
    coverage              = { version = "^7.2.7", extras = ["toml"] }
    darglint              = "^1.8.1"
    flake8                = ">=4.0.1,<5.0.0"
    flake8-annotations    = "^2.9.1"
    flake8-bandit         = "^3.0.0"
    flake8-blind-except   = "^0.2.1"
    flake8-broken-line    = "^0.6.0"
    flake8-bugbear        = "^23.2.13"
    flake8-builtins       = "^2.1.0"
    flake8-docstrings     = "^1.7.0"
    flake8-logging-format = "^0.9.0"
    flakeheaven           = "^3.2.1"
    invoke                = "^2.0.0"
    isort                 = "^5.12.0"
    mypy                  = "^1.0.1"
    pre-commit            = "^3.1.1"
    pytest                = "^7.4.0"
    pytest-cov            = "^4.0.0"
    recommonmark          = "^0.7.1"
    safety                = "^2.4.0b1"
    sphinx                = "^7.0.1"
    watchdog              = { version = "^3.0.0", extras = ["watchmedo"] }
    xdoctest              = "^1.1.1"

  [tool.coverage.paths]
    source = ["*/site-packages", "src"]

  [tool.coverage.run]
    branch = true
    source = ["pyusbtree"]

  [tool.coverage.report]
    exclude_lines = [
      "def __repr__",
      "if 0:",
      "if __name__ == __main__:",
      "if self.debug",
      "if settings.DEBUG:",
      "pragma: no cover",
      "raise AssertionError",
      "raise NotImplementedError",
    ]
    fail_under = 100
    show_missing = true

  [tool.coverage.html]
    directory = "htmlcov"

[tool.flakeheaven]
  docstring-convention    = "google"
  extended_default_ignore = []
  format                  = "grouped"
  max_line_length         = 99
  show_source             = true

  [tool.flakeheaven.plugins]
    "flake8-*"         = ["+*"]
    flake8-annotations = ["+*", "-ANN1??", "-ANN401"]
    flake8-docstrings  = ["+*", "-D212"]
    mccabe             = ["+*"]
    pycodestyle        = ["+*"]
    pyflakes           = ["+*"]
    pylint             = ["+F????", "+I????", "-C????", "-E????", "-R????", "-W????"]

  [tool.flakeheaven.exceptions."tests/"]
    flake8-bandit = ["-S101"]

[tool.isort]
  force_grid_wrap        = 0
  include_trailing_comma = true
  known_third_party      = ["invoke", "nox", "nox_poetry"]
  line_length            = 99
  multi_line_output      = 3
  use_parentheses        = true

[tool.black]
  line-length    = 99
  target-version = ["py37"]

[build-system]
  build-backend = "poetry.masonry.api"
  requires      = ["poetry>=0.12"]
